{"version":3,"file":"static/js/702.016eb186.chunk.js","mappings":"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","sources":["redux/use-dispatch-delete-inventory-item.ts","components/inventory-list/delete-inventory-item-button.tsx","components/inventory-list/edit-inventory-item-button.tsx","components/inventory-list/inventory-item-card.tsx","webpack://inventory-manager/./src/components/screen-header/styles.module.less?0a6a","components/screen-header/index.tsx","redux/action.ts","screens/inventory-by-category/add-inventory-item-button.tsx","screens/inventory-by-category/inventory-list.tsx","screens/inventory-by-category/routes.tsx","screens/inventory-by-category/index.tsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\n\nimport action from './action';\nimport store from './store';\n\nconst useDispatchDeleteInventoryItem = () => {\n  const dispatch = useDispatch();\n\n  return (inventoryItemId: string) => {\n    const state = store.getState();\n\n    return dispatch(action({\n      ...state,\n      inventoryItems: state.inventoryItems.filter((it) => it.id !== inventoryItemId),\n    }));\n  };\n};\n\nexport default useDispatchDeleteInventoryItem;\n","import { Button, Popconfirm } from 'antd';\nimport React from 'react';\n\nimport { DeleteOutlined } from '@ant-design/icons';\n\nimport useDispatchDeleteInventoryItem from '../../redux/use-dispatch-delete-inventory-item';\n\nconst DeleteInventoryButton: React.FC<{ inventoryItemId: string }> = ({ inventoryItemId }) => {\n  const dispatchDeleteInventoryItem = useDispatchDeleteInventoryItem();\n\n  return (\n    <Popconfirm\n      title=\"Are you sure to delete the inventory item?\"\n      onConfirm={() => {\n        dispatchDeleteInventoryItem(inventoryItemId);\n      }}\n      okText=\"Yes\"\n      cancelText=\"No\"\n    >\n      <Button>\n        <DeleteOutlined />\n        Delete\n      </Button>\n    </Popconfirm>\n  );\n};\n\nexport default DeleteInventoryButton;\n","import { Button } from 'antd';\nimport React from 'react';\nimport { useHistory, useRouteMatch } from 'react-router-dom';\n\nimport { EditOutlined } from '@ant-design/icons';\n\nconst EditInventoryItemButton: React.FC<{ inventoryItemId: string }> = ({ inventoryItemId }) => {\n  const history = useHistory();\n  const { url } = useRouteMatch();\n\n  const onEdit = () => {\n    history.push(`${url}/${inventoryItemId}/edit-item`);\n  };\n\n  return (\n    <Button onClick={() => onEdit()}>\n      <EditOutlined />\n      Edit\n    </Button>\n  );\n};\n\nexport default EditInventoryItemButton;\n","import { Card, Descriptions, Space, Typography } from 'antd';\nimport moment from 'moment';\nimport React from 'react';\n\nimport { TCategory, TInventoryItem } from '../../types';\nimport DeleteInventoryButton from './delete-inventory-item-button';\nimport EditInventoryItemButton from './edit-inventory-item-button';\n\nconst InventoryItemCard: React.FC<{\n  category: TCategory;\n  inventoryItem: TInventoryItem;\n  showCategory?: boolean;\n}> = ({ category, inventoryItem, showCategory }) => (\n  <Card size=\"small\" className=\"mb-4 box-shadow\">\n    <Descriptions\n      layout=\"vertical\"\n      size=\"small\"\n      colon={false}\n      column={{ xl: 3, lg: 3, md: 2, sm: 1, xs: 1 }}\n    >\n      {showCategory && (\n        <Descriptions.Item\n          label={(\n            <Typography.Text type=\"secondary\">\n              Category\n            </Typography.Text>\n          )}\n        >\n          {category.title}\n        </Descriptions.Item>\n      )}\n      {category.fields.filter((it) => it.type !== 'LongText').map((categoryField) => {\n        const data = inventoryItem.data.find((itemData) => itemData.categoryFieldId === categoryField.id);\n\n        if (!data) {\n          return null;\n        }\n\n        let value = '';\n        if (categoryField.type === 'Date' && data.value) {\n          try {\n            value = moment(Number(data.value)).format(\"DD MMM 'YY\");\n          } catch (err) {\n            console.error(err);\n          }\n        } else {\n          value = data.value;\n        }\n\n        return (\n          <Descriptions.Item\n            key={categoryField.id}\n            label={(\n              <Typography.Text type=\"secondary\">\n                {categoryField.title}\n              </Typography.Text>\n            )}\n            span={categoryField.type === 'LongText' ? 2 : 1}\n          >\n            {(value ?? '').length > 0 ? value : 'Not available'}\n          </Descriptions.Item>\n        );\n      })}\n    </Descriptions>\n    <Descriptions\n      layout=\"vertical\"\n      size=\"small\"\n      colon={false}\n      column={{ xl: 1, lg: 1, md: 1, sm: 1, xs: 1 }}\n    >\n      {category.fields.filter((it) => it.type === 'LongText').map((categoryField) => {\n        const data = inventoryItem.data.find((itemData) => itemData.categoryFieldId === categoryField.id);\n\n        if (!data) {\n          return null;\n        }\n\n        return (\n          <Descriptions.Item\n            key={categoryField.id}\n            label={(\n              <Typography.Text type=\"secondary\">\n                {categoryField.title}\n              </Typography.Text>\n            )}\n            span={categoryField.type === 'LongText' ? 2 : 1}\n          >\n            {(data.value ?? '').length > 0 ? data.value : 'Not available'}\n          </Descriptions.Item>\n        );\n      })}\n    </Descriptions>\n    <Space className=\"mt-1\" direction=\"horizontal\" size=\"small\">\n      <EditInventoryItemButton inventoryItemId={inventoryItem.id} />\n      <DeleteInventoryButton inventoryItemId={inventoryItem.id} />\n    </Space>\n  </Card>\n);\n\nexport default React.memo(InventoryItemCard);\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"styles_header__SE5mY\"};","import React from 'react';\n\nimport styles from './styles.module.less';\n\nconst ScreenHeader: React.FC<{ children: React.ReactNode }> = ({ children }) => (\n  <div className={`pb-4 ${styles.header}`}>\n    {children}\n  </div>\n);\n\nexport default ScreenHeader;\n","import { TState } from './types';\n\nconst action = (payload: TState) => ({\n  type: 'ACTION',\n  payload,\n});\n\nexport default action;\n","import { Button } from 'antd';\nimport React from 'react';\nimport { useHistory, useRouteMatch } from 'react-router-dom';\n\nimport { PlusOutlined } from '@ant-design/icons';\n\nconst AddInventoryItemButton: React.FC<{ categoryId: string }> = ({ categoryId }) => {\n  const history = useHistory();\n  const { url } = useRouteMatch();\n\n  const onAdd = () => {\n    history.push(`${url}/${categoryId}/add-item`);\n  };\n\n  return (\n    <Button onClick={() => onAdd()}>\n      <PlusOutlined />\n      Add New Item\n    </Button>\n  );\n};\n\nexport default AddInventoryItemButton;\n","import { Card, Result } from 'antd';\nimport React from 'react';\nimport { shallowEqual, useSelector } from 'react-redux';\n\nimport { BulbOutlined } from '@ant-design/icons';\n\nimport InventoryItemCard from '../../components/inventory-list/inventory-item-card';\nimport { TState } from '../../redux/types';\nimport { TCategory, TInventoryItem } from '../../types';\n\nconst InventoryItemList: React.FC<{ category: TCategory }> = ({ category }) => {\n  const inventoryItems = useSelector<TState, TInventoryItem[]>(\n    (state) => state.inventoryItems.filter((inventoryItem) => inventoryItem.categoryId === category.id),\n    shallowEqual,\n  );\n\n  if (inventoryItems.length > 0) {\n    return (\n      <div>\n        {inventoryItems.map((inventoryItem) => (\n          <InventoryItemCard\n            key={inventoryItem.id}\n            category={category}\n            inventoryItem={inventoryItem}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <Card className=\"box-shadow\">\n      <Result\n        icon={<BulbOutlined />}\n        title={`Start managing ${category.title}!`}\n        subTitle=\"Please start adding our inventory items.\"\n      />\n    </Card>\n  );\n};\n\nexport default React.memo(InventoryItemList);\n","import React, { lazy } from 'react';\nimport { Route, Switch, useRouteMatch } from 'react-router-dom';\n\nimport AppOverlaySpinner from '../../components/app-overlay-spinner';\nimport ErrorBoundary from '../../components/error-boundary';\n\nconst AddInventoryItem = lazy(() => import('../add-inventory-item'));\nconst EditInventoryItem = lazy(() => import('../edit-inventory-item'));\n\nconst InventoryRoutes: React.ComponentType = () => {\n  const { url } = useRouteMatch();\n\n  return (\n    <ErrorBoundary>\n      <React.Suspense fallback={<AppOverlaySpinner />}>\n        <Switch>\n          <Route exact path={`${url}/:categoryId/add-item`}>\n            <AddInventoryItem goBackUrl={url} />\n          </Route>\n          <Route exact path={`${url}/:inventoryItemId/edit-item`}>\n            <EditInventoryItem goBackUrl={url} />\n          </Route>\n        </Switch>\n      </React.Suspense>\n    </ErrorBoundary>\n  );\n};\n\nexport default InventoryRoutes;\n","import { Col, Row, Typography } from 'antd';\nimport React, { useEffect } from 'react';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { useHistory, useParams } from 'react-router-dom';\n\nimport ScreenHeader from '../../components/screen-header';\nimport { TState } from '../../redux/types';\nimport { TCategory } from '../../types';\nimport AddInventoryItemButton from './add-inventory-item-button';\nimport InventoryItemList from './inventory-list';\nimport InventoryRoutes from './routes';\n\nconst InventoryByCategory: React.FC = () => {\n  const history = useHistory();\n  const { categoryId } = useParams<{ categoryId: string }>();\n  const category = useSelector<TState, TCategory | undefined>((state) => state.categories.find((it) => it.id === categoryId), shallowEqual);\n\n  useEffect(() => {\n    if (categoryId && !category) {\n      history.push('/');\n    }\n  }, [categoryId, category]);\n\n  return (\n    <div>\n      <ScreenHeader>\n        <Row>\n          <Col xs={24} sm={24} md={12}>\n            <Typography.Title>{category?.title}</Typography.Title>\n          </Col>\n          <Col xs={24} sm={24} md={12} className=\"flex flex-row justify-end items-center\">\n            <AddInventoryItemButton categoryId={categoryId} />\n          </Col>\n        </Row>\n      </ScreenHeader>\n      <div>\n        {category && <InventoryItemList category={category} />}\n        <InventoryRoutes />\n      </div>\n    </div>\n  );\n};\n\nexport default InventoryByCategory;\n"],"names":["dispatch","useDispatch","inventoryItemId","state","store","action","inventoryItems","filter","it","id","dispatchDeleteInventoryItem","useDispatchDeleteInventoryItem","title","onConfirm","okText","cancelText","DeleteOutlined","history","useHistory","url","useRouteMatch","onClick","push","EditOutlined","InventoryItemCard","category","inventoryItem","showCategory","size","className","layout","colon","column","xl","lg","md","sm","xs","label","type","fields","map","categoryField","data","find","itemData","categoryFieldId","value","moment","Number","format","err","console","error","span","length","direction","React","children","styles","payload","categoryId","PlusOutlined","InventoryItemList","useSelector","shallowEqual","icon","BulbOutlined","subTitle","AddInventoryItem","lazy","EditInventoryItem","fallback","exact","path","goBackUrl","useParams","categories","useEffect"],"sourceRoot":""}