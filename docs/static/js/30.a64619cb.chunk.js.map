{"version":3,"file":"static/js/30.a64619cb.chunk.js","mappings":"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","sources":["components/inventory-item-form/index.tsx","components/router-drawer.tsx","redux/use-dispatch-add-inventory-item.ts","screens/add-inventory-item.tsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { DatePicker, Form, Input } from 'antd';\nimport moment from 'moment';\nimport React from 'react';\n\nimport { TCategory, TInventoryItemField } from '../../types';\n\nconst InventoryItemForm: React.FC<{\n  category: TCategory;\n  values: TInventoryItemField[];\n  onChange: (values: TInventoryItemField[]) => void;\n}> = ({ category, values, onChange }) => {\n  return (\n    <Form layout=\"vertical\" colon={false} style={{ minWidth: '280px' }}>\n      {category.fields.map((categoryField) => {\n        const data = values.find((it) => it.categoryFieldId === categoryField.id);\n\n        if (!data) {\n          return null;\n        }\n\n        const onFieldValueChange = (changedValue: string) => {\n          onChange([\n            ...values.filter((it) => it.categoryFieldId !== categoryField.id),\n            { ...data, value: changedValue },\n          ]);\n        };\n\n        return (\n          <React.Fragment key={categoryField.id}>\n            <Form.Item label={categoryField.title}>\n              {categoryField.type === 'ShortText' && (\n                <Input\n                  value={data.value ?? ''}\n                  onChange={(e) => {\n                    onFieldValueChange(e.target.value);\n                  }}\n                  type=\"text\"\n                  placeholder={categoryField.title as string}\n                />\n              )}\n              {categoryField.type === 'LongText' && (\n                <Input.TextArea\n                  value={data.value ?? ''}\n                  onChange={(e) => {\n                    onFieldValueChange(e.target.value);\n                  }}\n                  placeholder={categoryField.title as string}\n                />\n              )}\n              {categoryField.type === 'Number' && (\n                <Input\n                  value={data.value ?? ''}\n                  onChange={(e) => {\n                    onFieldValueChange(e.target.value);\n                  }}\n                  type=\"number\"\n                  placeholder={categoryField.title as string}\n                />\n              )}\n              {categoryField.type === 'Date' && (\n                <DatePicker\n                  format=\"DD MMM 'YY\"\n                  style={{ width: '100%' }}\n                  value={data.value && data.value.length > 0 ? moment(Number(data.value)) : undefined}\n                  allowClear={false}\n                  onChange={(changedDate) => {\n                    onFieldValueChange(changedDate?.valueOf().toString() ?? '');\n                  }}\n                />\n              )}\n            </Form.Item>\n          </React.Fragment>\n        );\n      })}\n    </Form>\n  );\n};\n\nexport default InventoryItemForm;\n","import { DrawerProps } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nconst RouterDrawer: React.FC<{\n  goBackUrl: string;\n  children: (drawerProps: DrawerProps, onToggle: (visible: boolean) => void) => React.ReactNode;\n}> = ({ goBackUrl, children }) => {\n  const history = useHistory();\n  const [visible, setVisible] = useState(false);\n\n  const drawerProps: DrawerProps = {\n    visible,\n    placement: 'right',\n    closable: false,\n    maskClosable: false,\n    push: false,\n    destroyOnClose: true,\n    width: 'auto',\n    onClose: () => {\n      setVisible(false);\n    },\n    afterVisibleChange: (visibility) => {\n      if (!visibility) {\n        history.push(goBackUrl);\n      }\n    },\n  };\n\n  const onToggle = (val: boolean) => {\n    setVisible(val);\n  };\n\n  useEffect(() => {\n    setVisible(true);\n  }, []);\n\n  return (\n    <React.Fragment>\n      {children(drawerProps, onToggle)}\n    </React.Fragment>\n  );\n};\n\nexport default RouterDrawer;\n","import { nanoid } from 'nanoid';\nimport { useDispatch } from 'react-redux';\n\nimport { TInventoryItem, TInventoryItemInput } from '../types';\nimport action from './action';\nimport store from './store';\n\nconst convertInventoryItemInputToInventoryItem = (data: TInventoryItemInput): TInventoryItem => {\n  const inputValues: TInventoryItem = {\n    id: nanoid(),\n    categoryId: data.categoryId,\n    data: data.data,\n  };\n\n  return inputValues;\n};\n\nconst useDispatchAddInventoryItem = () => {\n  const dispatch = useDispatch();\n\n  return (inventoryItemInput: TInventoryItemInput) => {\n    const state = store.getState();\n\n    const inventoryItemData = convertInventoryItemInputToInventoryItem(inventoryItemInput);\n\n    return dispatch(action({\n      ...state,\n      inventoryItems: [\n        ...state.inventoryItems,\n        inventoryItemData,\n      ],\n    }));\n  };\n};\n\nexport default useDispatchAddInventoryItem;\n","import { Button, Drawer, Typography } from 'antd';\nimport React, { useState } from 'react';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\n\nimport { CloseOutlined } from '@ant-design/icons';\n\nimport InventoryItemForm from '../components/inventory-item-form';\nimport RouterDrawer from '../components/router-drawer';\nimport { TState } from '../redux/types';\nimport useDispatchAddInventoryItem from '../redux/use-dispatch-add-inventory-item';\nimport { TCategory, TInventoryItemField } from '../types';\n\nconst AddInventoryItem: React.FC<{ goBackUrl: string }> = ({ goBackUrl }) => {\n  const { categoryId } = useParams<{ categoryId: string }>();\n  const category = useSelector<TState, TCategory | undefined | null>(\n    (state) => state.categories.find((it) => it.id === categoryId),\n    shallowEqual,\n  );\n  const dispatchAddInventoryItem = useDispatchAddInventoryItem();\n\n  const [formValues, setFormValues] = useState<TInventoryItemField[]>(\n    (category?.fields ?? []).map((categoryField) => ({\n      categoryFieldId: categoryField.id,\n      value: '',\n    }))\n  );\n\n  return (\n    <RouterDrawer goBackUrl={goBackUrl}>\n      {(drawerProps, onToggle) => {\n        const onSubmit = () => {\n          dispatchAddInventoryItem({ categoryId, data: formValues });\n          onToggle(false);\n        };\n\n        return (\n          <Drawer\n            {...drawerProps}\n            title={(\n              <div className=\"flex flex-row justify-between items-center\">\n                <Typography.Text strong>\n                  Add {category?.title}\n                </Typography.Text>\n                <Button\n                  type=\"text\"\n                  icon={<CloseOutlined />}\n                  onClick={() => onToggle(false)}\n                />\n              </div>\n            )}\n            footer={(\n              <div className=\"flex flex-row justify-end\">\n                <Button\n                  type=\"primary\"\n                  onClick={() => {\n                    onSubmit();\n                  }}\n                >\n                  Add\n                </Button>\n              </div>\n            )}\n          >\n            {category\n              ? (\n                <InventoryItemForm\n                  values={formValues}\n                  category={category}\n                  onChange={(changedValues) => {\n                    setFormValues(changedValues);\n                  }}\n                />\n              )\n              : null}\n          </Drawer>\n        );\n      }}\n    </RouterDrawer>\n  );\n};\n\nexport default AddInventoryItem;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["category","values","onChange","layout","colon","style","minWidth","fields","map","categoryField","data","find","it","categoryFieldId","id","onFieldValueChange","changedValue","filter","value","label","title","type","e","target","placeholder","format","width","length","moment","Number","undefined","allowClear","changedDate","valueOf","toString","goBackUrl","children","history","useHistory","useState","visible","setVisible","drawerProps","placement","closable","maskClosable","push","destroyOnClose","onClose","afterVisibleChange","visibility","useEffect","val","dispatch","useDispatch","inventoryItemInput","state","store","inventoryItemData","nanoid","categoryId","action","inventoryItems","useParams","useSelector","categories","shallowEqual","dispatchAddInventoryItem","useDispatchAddInventoryItem","formValues","setFormValues","onToggle","className","strong","icon","CloseOutlined","onClick","footer","changedValues","size","crypto","getRandomValues","Uint8Array","reduce","byte","toUpperCase"],"sourceRoot":""}