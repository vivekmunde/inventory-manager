{"version":3,"file":"static/js/633.c07dbfdb.chunk.js","mappings":"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","sources":["components/category-form/field-title.tsx","components/category-form/fields/add-field.tsx","components/category-form/fields/field.tsx","components/category-form/fields/index.tsx","components/category-form/index.tsx","components/category-form/utils.ts","components/router-drawer.tsx","redux/use-dispatch-update-category.ts","screens/edit-category.tsx"],"sourcesContent":["import { Form, Select } from 'antd';\nimport React from 'react';\n\nimport { TCategoryFieldFormInput } from './types';\n\nconst FieldTitle: React.FC<{\n  fields: TCategoryFieldFormInput[];\n  value: string;\n  onChange: (value: string) => void;\n}> = ({ fields, value, onChange }) => {\n  return (\n    <Form.Item label=\"Field title\">\n      <Select\n        defaultValue={value}\n        value={value}\n        onChange={(changedFieldTitleUiKey) => {\n          onChange(changedFieldTitleUiKey);\n        }}\n      >\n        {fields.map((field) => (\n          <Select.Option key={field.uiKey} value={field.uiKey}>{field.title}</Select.Option>\n        ))}\n      </Select>\n    </Form.Item>\n  );\n};\n\nexport default FieldTitle;\n","import { Button } from 'antd';\nimport React from 'react';\n\nimport { PlusOutlined } from '@ant-design/icons';\n\nconst AddField: React.FC<{\n  onAdd: () => void;\n}> = React.memo(\n  ({ onAdd }) => (\n    <Button\n      type=\"default\"\n      onClick={() => {\n        onAdd();\n      }}\n    >\n      <PlusOutlined />\n      Add field\n    </Button>\n  )\n);\n\nexport default AddField;\n","import { Button, Form, Input, Select } from 'antd';\nimport React from 'react';\n\nimport { CloseOutlined } from '@ant-design/icons';\n\nimport { fieldTypeTranslations } from '../../../translations';\nimport { TCategoryFieldFormInput } from '../types';\n\nconst Field: React.FC<{\n  value: TCategoryFieldFormInput;\n  canDelete: boolean;\n  onChange: (value: TCategoryFieldFormInput) => void;\n  onDelete: (value: TCategoryFieldFormInput) => void;\n}> = React.memo(\n  ({ value, canDelete, onChange, onDelete }) => (\n    <Form.Item>\n      <Input\n        value={value.title as string}\n        onChange={(e) => {\n          value.title = e.target.value;\n          onChange({\n            ...value,\n            title: e.target.value,\n          });\n        }}\n        addonBefore={(\n          <Select\n            defaultValue={value.type}\n            value={value.type}\n            onChange={(changedType) => {\n              onChange({\n                ...value,\n                type: changedType,\n              });\n            }}\n            style={{ minWidth: '120px' }}>\n            {fieldTypeTranslations.map((type) => (\n              <Select.Option key={type.type} value={type.type}>{type.label}</Select.Option>\n            ))}\n          </Select>\n        )}\n        addonAfter={canDelete && (\n          <Button\n            type=\"text\"\n            size=\"small\"\n            shape=\"circle\"\n            onClick={() => {\n              onDelete(value);\n            }}\n          >\n            <CloseOutlined className=\"font-color-secondary\" />\n          </Button>\n        )}\n      />\n    </Form.Item>\n  )\n);\n\nexport default Field;\n","import { nanoid } from 'nanoid';\nimport React from 'react';\n\nimport { TCategoryFieldFormInput } from '../types';\nimport AddField from './add-field';\nimport Field from './field';\n\nconst Fields: React.FC<{\n  value: TCategoryFieldFormInput[];\n  onChange: (value: TCategoryFieldFormInput[]) => void;\n}> = ({ value, onChange }) => {\n  const onFieldChange = (changedField: TCategoryFieldFormInput) => {\n    const indexOfChangedField = value.findIndex((it) => it.uiKey === changedField.uiKey);\n    if (indexOfChangedField > -1) {\n      value.splice(indexOfChangedField, 1, changedField);\n      onChange([...value]);\n    }\n  };\n\n  const onFieldDelete = (deletedField: TCategoryFieldFormInput) => {\n    onChange(value.filter((it) => it.uiKey !== deletedField.uiKey));\n  };\n\n  return (\n    <React.Fragment>\n      {value.map((it) => (\n        <Field\n          key={it.uiKey}\n          value={it}\n          canDelete={value.length > 1}\n          onChange={onFieldChange}\n          onDelete={onFieldDelete}\n        />\n      ))}\n      <AddField\n        onAdd={() => {\n          onChange([...value, { id: undefined, uiKey: nanoid(), title: '', type: 'ShortText' }]);\n        }}\n      />\n    </React.Fragment>\n  );\n};\n\nexport default Fields;\n","import { Form, Input } from 'antd';\nimport React from 'react';\n\nimport FieldTitle from './field-title';\nimport Fields from './fields';\nimport { TCategoryFormInput } from './types';\n\nconst CategoryForm: React.FC<{\n  values: TCategoryFormInput,\n  onChange: (values: TCategoryFormInput) => void;\n}> = ({ values, onChange }) => (\n  <Form layout=\"vertical\">\n    <Form.Item label=\"Category title\">\n      <Input\n        value={values.title}\n        onChange={(e) => {\n          onChange({\n            ...values,\n            title: e.target.value,\n          });\n        }}\n        type=\"text\"\n        placeholder=\"Category title\"\n      />\n    </Form.Item>\n    <FieldTitle\n      value={values.fieldTitleUiKey}\n      fields={values.fields}\n      onChange={(changedFieldTitleUiKey) => {\n        onChange({\n          ...values,\n          fieldTitleUiKey: changedFieldTitleUiKey,\n        });\n      }}\n    />\n    <Fields\n      value={values.fields}\n      onChange={(changedFields) => {\n        const isFieldTitleRemovedFromFields = !(changedFields.find((it) => it.uiKey === values.fieldTitleUiKey));\n        if (isFieldTitleRemovedFromFields) {\n          onChange({\n            ...values,\n            fields: changedFields,\n            fieldTitleUiKey: changedFields[0].uiKey,\n          });\n        } else {\n          onChange({\n            ...values,\n            fields: changedFields,\n          });\n        }\n      }} />\n  </Form>\n);\n\nexport default CategoryForm;\n","import { TCategory, TCategoryInput, TCategoryFieldInput } from '../../types';\nimport { TCategoryFormInput } from './types';\n\nexport const convertCategoryToCategoryFormInput = (data: TCategory): TCategoryFormInput => {\n  const fields = data.fields.map((it) => ({\n    id: it.id,\n    uiKey: it.id,\n    type: it.type,\n    title: it.title,\n  }));\n  return {\n    title: data.title,\n    fields,\n    fieldTitleUiKey: fields.find((it) => it.id === data.fieldTitleId)?.uiKey ?? '',\n  };\n};\n\nexport const convertCategoryFormInputToCategoryInput = (data: TCategoryFormInput): TCategoryInput => {\n  const inputValues: TCategoryInput = {\n    title: data.title,\n    fields: data.fields.map<TCategoryFieldInput>((it) => ({\n      id: it.id,\n      type: it.type,\n      title: it.title,\n    })),\n    fieldTitleIdIndex: data.fields.findIndex((it) => it.uiKey === data.fieldTitleUiKey),\n  };\n  return inputValues;\n};\n","import { DrawerProps } from 'antd';\nimport React, { useEffect, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\n\nconst RouterDrawer: React.FC<{\n  goBackUrl: string;\n  children: (drawerProps: DrawerProps, onToggle: (visible: boolean) => void) => React.ReactNode;\n}> = ({ goBackUrl, children }) => {\n  const history = useHistory();\n  const [visible, setVisible] = useState(false);\n\n  const drawerProps: DrawerProps = {\n    visible,\n    placement: 'right',\n    closable: false,\n    maskClosable: false,\n    push: false,\n    destroyOnClose: true,\n    width: 'auto',\n    keyboard: false,\n    onClose: () => {\n      setVisible(false);\n    },\n    afterVisibleChange: (visibility) => {\n      if (!visibility) {\n        history.push(goBackUrl);\n      }\n    },\n  };\n\n  const onToggle = (val: boolean) => {\n    setVisible(val);\n  };\n\n  useEffect(() => {\n    setVisible(true);\n  }, []);\n\n  return (\n    <React.Fragment>\n      {children(drawerProps, onToggle)}\n    </React.Fragment>\n  );\n};\n\nexport default RouterDrawer;\n","import { nanoid } from 'nanoid';\nimport { useDispatch } from 'react-redux';\n\nimport { TCategory, TCategoryInput, TCategoryField } from '../types';\nimport action from './action';\nimport store from './store';\n\nconst convertCategoryInputToCategory = (categoryId: string, data: TCategoryInput): TCategory => {\n  const fields: TCategoryField[] = data.fields.map((it) => ({\n    id: it.id ?? nanoid(),\n    type: it.type,\n    title: it.title,\n  }));\n\n  const inputValues: TCategory = {\n    id: categoryId,\n    slug: data.title.replace(/\\s/, '-'),\n    title: data.title,\n    fields,\n    fieldTitleId: fields[data.fieldTitleIdIndex].id,\n  };\n\n  return inputValues;\n};\n\nconst useDispatchUpdateCategory = () => {\n  const dispatch = useDispatch();\n\n  return (payload: { categoryId: string, categoryInput: TCategoryInput }) => {\n    const state = store.getState();\n\n    return dispatch(action({\n      ...state,\n      categories: state.categories.map((it) => it.id === payload.categoryId\n        ? convertCategoryInputToCategory(payload.categoryId, payload.categoryInput)\n        : it),\n    }));\n  };\n};\n\nexport default useDispatchUpdateCategory;\n","import { Button, Drawer, Typography } from 'antd';\nimport React, { useState } from 'react';\nimport { shallowEqual, useSelector } from 'react-redux';\nimport { useParams } from 'react-router-dom';\n\nimport { CloseOutlined } from '@ant-design/icons';\n\nimport CategoryForm from '../components/category-form';\nimport { TCategoryFormInput } from '../components/category-form/types';\nimport {\n  convertCategoryFormInputToCategoryInput, convertCategoryToCategoryFormInput\n} from '../components/category-form/utils';\nimport RouterDrawer from '../components/router-drawer';\nimport { TState } from '../redux/types';\nimport useDispatchUpdateCategory from '../redux/use-dispatch-update-category';\nimport { TCategory } from '../types';\n\nconst EditCategory: React.FC<{ goBackUrl: string }> = ({ goBackUrl }) => {\n  const { categoryId } = useParams<{ categoryId: string }>();\n  const dispatchUpdateCategory = useDispatchUpdateCategory();\n  const categoryToEdit = useSelector<TState, TCategory | undefined | null>(\n    (state) => state.categories.find((it) => it.id === categoryId),\n    shallowEqual,\n  );\n\n  const [formValues, setFormValues] = useState<TCategoryFormInput | undefined | null>(\n    categoryToEdit\n      ? convertCategoryToCategoryFormInput(categoryToEdit)\n      : undefined\n  );\n\n  return (\n    <RouterDrawer goBackUrl={goBackUrl}>\n      {(drawerProps, onToggle) => {\n        const onSubmit = () => {\n          if (formValues && formValues.title && !formValues.fields.find((it) => (it.title ?? '').length === 0)) {\n            dispatchUpdateCategory({\n              categoryId,\n              categoryInput: convertCategoryFormInputToCategoryInput(formValues),\n            });\n            onToggle(false);\n          }\n        };\n\n        return (\n          <Drawer\n            {...drawerProps}\n            title={(\n              <div className=\"flex flex-row justify-between items-center\">\n                <Typography.Text strong>\n                  Edit Category\n                </Typography.Text>\n                <Button\n                  type=\"text\"\n                  icon={<CloseOutlined />}\n                  onClick={() => onToggle(false)}\n                />\n              </div>\n            )}\n            footer={(\n              <div className=\"flex flex-row justify-end\">\n                <Button\n                  type=\"primary\"\n                  onClick={() => {\n                    onSubmit();\n                  }}\n                >\n                  Update\n                </Button>\n              </div>\n            )}\n          >\n            {formValues\n              ? (\n                <CategoryForm\n                  values={formValues}\n                  onChange={(changedValues) => {\n                    setFormValues(changedValues);\n                  }}\n                />\n              )\n              : null}\n          </Drawer>\n        );\n      }}\n    </RouterDrawer>\n  );\n};\n\nexport default EditCategory;\n"],"names":["fields","value","onChange","label","defaultValue","changedFieldTitleUiKey","map","field","uiKey","title","React","onAdd","type","onClick","PlusOutlined","canDelete","onDelete","e","target","addonBefore","changedType","style","minWidth","fieldTypeTranslations","addonAfter","size","shape","CloseOutlined","className","onFieldChange","changedField","indexOfChangedField","findIndex","it","splice","onFieldDelete","deletedField","filter","length","id","undefined","nanoid","values","layout","placeholder","fieldTitleUiKey","changedFields","isFieldTitleRemovedFromFields","find","convertCategoryToCategoryFormInput","data","fieldTitleId","convertCategoryFormInputToCategoryInput","fieldTitleIdIndex","goBackUrl","children","history","useHistory","useState","visible","setVisible","drawerProps","placement","closable","maskClosable","push","destroyOnClose","width","keyboard","onClose","afterVisibleChange","visibility","useEffect","val","dispatch","useDispatch","payload","state","store","action","categories","categoryId","slug","replace","convertCategoryInputToCategory","categoryInput","useParams","dispatchUpdateCategory","useDispatchUpdateCategory","categoryToEdit","useSelector","shallowEqual","formValues","setFormValues","onToggle","strong","icon","footer","changedValues"],"sourceRoot":""}